<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx" gap="0" horizontalAlign="center" verticalAlign="middle" creationComplete="hgroup1_creationCompleteHandler(event)">
	<fx:Metadata>
		[Event(name="itemChange", type="com.best.web.gyorg.library.event.ItemSelectEvent")]
		[Event(name="change", type="spark.events.IndexChangeEvent")]
		[Event(name="dragComplete", type="mx.events.DragEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.best.web.gyorg.library.event.ItemSelectEvent;
			import com.best.web.gyorg.library.manager.TimerManager;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.CollectionEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.Scroller;
			import spark.core.IViewport;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var _dataProvider:IList;
			public function set dataProvider(value:IList):void
			{
				if(_dataProvider != null){
					_dataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE,restScroll);
				}
				_dataProvider = value;
				moveEnd();
				(value as ArrayCollection).addEventListener(CollectionEvent.COLLECTION_CHANGE,restScroll);
				restScroll();
			}
			
			private function restScroll(e:CollectionEvent = null):void
			{
				if(container.scroller != null && targetScrollPosition != 0){
					TimerManager.setTimeOut(10,resumePosition);
				}
			}
			
			private function resumePosition():void
			{
				container.scroller.viewport.horizontalScrollPosition = targetScrollPosition;
			}
			
			private var _horizontalGapValue:Number = 30;
			private function clickLeftHandler(e:Event):void
			{
//				container.scroller.viewport.horizontalScrollPosition += 15;
				targetScrollPosition = container.scroller.viewport.horizontalScrollPosition - _horizontalGapValue;
//				TweenLite.to(container.scroller.viewport,.1,{horizontalScrollPosition:container.scroller.viewport.horizontalScrollPosition + 15});
				moveStart();
			}
			
			private function clickRightHandler(e:Event):void
			{
//				container.scroller.viewport.horizontalScrollPosition -= 15;
				targetScrollPosition = container.scroller.viewport.horizontalScrollPosition + _horizontalGapValue;
//				TweenLite.to(container.scroller.viewport,.1,{horizontalScrollPosition:container.scroller.viewport.horizontalScrollPosition - 15});
				moveStart();
			}
			
			private var _step:Number = 6;
			private var targetScrollPosition:Number = 0;
			private var preScrollPosition:Number;
			private function moveStart():void{
				preScrollPosition = container.scroller.viewport.horizontalScrollPosition;
				addEventListener(Event.ENTER_FRAME,onEnterFrame);
//				TimerManager.setIntervalOut(50,onEnterFrame);
			}
			
			private function onEnterFrame(e:Event = null):void
			{
				container.scroller.viewport.horizontalScrollPosition += (targetScrollPosition - container.scroller.viewport.horizontalScrollPosition) / (_step + 1);
				if(container.scroller.viewport.horizontalScrollPosition == preScrollPosition){//表示没有变化
//					container.scroller.viewport.horizontalScrollPosition = targetScrollPosition;
					targetScrollPosition = preScrollPosition;//记录最终的位置
					moveEnd();
					return;
				}
				preScrollPosition = container.scroller.viewport.horizontalScrollPosition;
//				if(Math.abs(container.scroller.viewport.horizontalScrollPosition - targetScrollPosition) < 0.01){
//					container.scroller.viewport.horizontalScrollPosition = targetScrollPosition;
//					moveEnd();
//				}
			}
			
			private function moveEnd():void
			{
				removeEventListener(Event.ENTER_FRAME,onEnterFrame);
//				TimerManager.clearIntervalOut(onEnterFrame);
			}
			
//			private function myScroll(e:Event):void
//			{
//			}
			
			private function containerChangeHandler(e:IndexChangeEvent):void
			{
				dispatchEvent(e);//向外抛出
			}
			
			public function set selectedIndex(value:int):void{
				container.selectedIndex = value;
			}
			public function get selectedIndex():int
			{
				return container.selectedIndex;
			}
			public function set selectedItem(value:Object):void{
				container.selectedItem = value;
			}
			public function get selectedItem():Object{
				return container.selectedItem;
			}
			[Bindable]
			private var _itemRenderer:IFactory;
			/**
			 *  @private
			 */
			public function set itemRenderer(value:IFactory):void
			{
				_itemRenderer = value;
			}
			
			private function resizeHandler(e:ResizeEvent = null):void
			{
				shieldHorizontalScrollBar();
			}
			
			private function shieldHorizontalScrollBar():void{
				var scroller:Scroller = container.scroller;
				scroller.horizontalScrollBar.scaleX = scroller.horizontalScrollBar.scaleY = 0;
			}
			
			private function hgroup1_creationCompleteHandler(e:FlexEvent):void
			{
				var viewport:IViewport = container.scroller.viewport;
				viewport.addEventListener(Event.RESIZE, resizeHandler);
				var scroller:Scroller = container.scroller;
				BindingUtils.bindProperty(this,"showOperateButton",scroller.horizontalScrollBar,"visible");
				
				container.addEventListener(ItemSelectEvent.ITEM_CHANGE,onItemChange);
			}
			
			private function onItemChange(e:ItemSelectEvent):void
			{
				dispatchEvent(e);
			}
			
			private var _showOperateButton:Boolean;
			public function get showOperateButton():Boolean
			{
				return _showOperateButton;
			}

			public function set showOperateButton(value:Boolean):void
			{
				_showOperateButton = value;
				if(value){
					if(btnLeft.parent == null)this.addElementAt(btnLeft,0);
					if(btnRight.parent == null)this.addElementAt(btnRight,numChildren);
//					var scroller:Scroller = container.scroller;
//					if(scroller != null){
//						scroller.horizontalScrollBar.scaleX = scroller.horizontalScrollBar.scaleY = 0;
//					}
					shieldHorizontalScrollBar();//显示的情况下再次屏蔽
				}else{
					if(btnLeft.parent == this)this.removeElement(btnLeft);
					if(btnRight.parent == this)this.removeElement(btnRight);
				}
			}
			
			private function listDragComplete(e:DragEvent):void
			{
				dispatchEvent(e);//向外抛出
			}
			
			[Bindable]
			private var _dragDataEnabled:Boolean;
			public function set dragDataEnabled(value:Boolean):void
			{
				_dragDataEnabled = value;
			}
			
//			[Bindable]
			private var _scrollBarHeight:Number;
			/**
			 * 拖动按钮的高度
			 * */
			public function set scrollBarHeight(value:Number):void
			{
				_scrollBarHeight = value;
				if(isNaN(_scrollBarHeight)){
					btnLeft.percentHeight = btnRight.percentHeight = 100;
				}else{
					btnLeft.height = btnRight.height = _scrollBarHeight;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:Button left="0" width="20" id="btnLeft" buttonDown="clickLeftHandler(event)" autoRepeat="true"
				  skinClass="spark.skins.spark.ScrollBarLeftButtonSkin" height="100%" />
		<s:Button right="0" width="20" id="btnRight" buttonDown="clickRightHandler(event)" autoRepeat="true"
				  skinClass="spark.skins.spark.ScrollBarRightButtonSkin" height="100%" />
	</fx:Declarations>
	<s:List id="container" verticalScrollPolicy="off" width="100%" height="100%" change="containerChangeHandler(event)" 
			itemRenderer="{_itemRenderer}" borderVisible="false" dataProvider="{_dataProvider}" dragComplete="listDragComplete(event)"
			dropEnabled="{_dragDataEnabled}" dragEnabled="{_dragDataEnabled}" dragMoveEnabled="{_dragDataEnabled}"
			contentBackgroundAlpha="0"
			>
		<s:layout>
			<s:HorizontalLayout id="myH" verticalAlign="middle" gap="12" useVirtualLayout="false" />
		</s:layout>
	</s:List>
</s:HGroup>
