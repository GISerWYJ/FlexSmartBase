<?xml version="1.0" encoding="utf-8"?>
<s:List xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		skinClass="com.best.web.gyorg.library.skin.TitlePartListSkin" creationComplete="listCreationCompleteHandler(event)">
	
	<!-- width="100%" height="100%" minWidth="100" minHeight="200" horizontalScrollPolicy="off"  -->
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			import spark.components.Group;
			import spark.core.NavigationUnit;
			
			[SkinPart(required="false")]
			public var titleGroupContainer:Group;
			[SkinPart(required="false")]
			public var btnTurnTop:Button;
			[SkinPart(required="false")]
			public var btnTurnBottom:Button;
			//			[SkinPart(required="false")]
			//			public var btnContainer:VGroup;
			/*override protected function item_mouseDownHandler(event:MouseEvent):void{
				var target:DisplayObject = event.target as DisplayObject;
				if(!target.hasOwnProperty("id") || !(event.target.id == "checkArea")){
					event.preventDefault();
				}
				event.ctrlKey = true;
				super.item_mouseDownHandler(event);
			}*/
			
			private function listCreationCompleteHandler(e:FlexEvent):void
			{
				if(_titleGroup != null && titleGroupContainer != null)
					titleGroupContainer.addElement(_titleGroup);
				
				BindingUtils.bindProperty(this,"scrollVertical",scroller.viewport,"verticalScrollPosition");
				BindingUtils.bindProperty(this,"showVerticalScroll",scroller.verticalScrollBar,"visible");
				BindingUtils.bindProperty(this,"showVerticalWidth",scroller.verticalScrollBar,"width");
				
//				if(btnTurnTop != null){
//					btnTurnTop.label = _toTopLabel;
//				}
				checkTopTag();
//				if(btnTurnBottom != null){
//					btnTurnBottom.label = _toBottomLabel;
//				}
				checkBottomTag();
				btnTurnTop.addEventListener(MouseEvent.CLICK,clickTurn);
				btnTurnBottom.addEventListener(MouseEvent.CLICK,clickTurn);
			}
			
			private function clickTurn(e:MouseEvent):void
			{
				if(e.currentTarget == btnTurnTop){
					scrollToTop();
				}else if(e.currentTarget == btnTurnBottom){
					scrollToBottom();
				}
			}
			
			private var _showVerticalWidth:Number;
			public function set showVerticalWidth(value:Number):void
			{
				_showVerticalWidth = value;
				if(_showVerticalScroll){
					scroller.setStyle("right",-value);
					//					titleGroupContainer.setStyle("right",value);//要留出这段
				}
			}
			
			private var _showVerticalScroll:Boolean;//当显示的时候
			public function set showVerticalScroll(value:Boolean):void
			{
				_showVerticalScroll = value;
				if(value){
					scroller.setStyle("right",-scroller.verticalScrollBar.width);
					//					titleGroupContainer.setStyle("right",scroller.verticalScrollBar.width);//要留出这段
				}else{
					scroller.setStyle("right",0);
					//					titleGroupContainer.setStyle("right",0);//要留出这段
				}
			}
			
			private var scrollType:int = -100;//-1顶部,0中间,1底部
			private var _scrollVertical:Number;//纵向滚动后触发
			public function set scrollVertical(value:Number):void
			{
				_scrollVertical = value;
				if(_titleTag != null && _titleGroup != null){
					var gPoint:Point = _titleTag.parent.localToGlobal(new Point(_titleTag.x,_titleTag.y));
					var nPoint:Point = _titleGroup.globalToLocal(gPoint);
					if(value > nPoint.y){
						value = nPoint.y;
					}
				}
				//				if(btnContainer != null){
				var nowType:int;
				if(_scrollVertical == 0){
					nowType = -1;
				}else if(getMaxVerticalScrollDelta() == 0){
					nowType = 1;
				}else{
					nowType = 0;
				}
				if(scrollType != nowType){//当有变化的时候改变按钮状态
					scrollType = nowType;
					//						btnContainer.removeAllElements();
					if(scrollType == -1){
						btnTurnBottom.visible = true;
						btnTurnTop.visible = false;
						//							btnContainer.addElement(btnTurnBottom);
					}else if(scrollType == 1){
						btnTurnTop.visible = true;
						btnTurnBottom.visible = false;
						//							btnContainer.addElement(btnTurnTop);
					}else{
						btnTurnTop.visible = true;
						btnTurnBottom.visible = true;
						//							btnContainer.addElement(btnTurnTop);
						//							btnContainer.addElement(btnTurnBottom);
					}
				}
				titleGroupContainer.setStyle("top",-value);
			}
			
			private var _toTopLabel:String = "回到顶部";
			public function set toTopLabel(value:String):void
			{
				_toTopLabel = value;
				checkTopTag();
			}
			
			private var _toTopIcon:Object;//顶部图标
			public function set toTopIcon(value:Object):void
			{
				_toTopIcon = value;
				checkTopTag();
			}
			
			private function checkTopTag():void{
				if(btnTurnTop != null){
					if(_toTopIcon != null){
						btnTurnTop.setStyle("icon",_toTopIcon);
						btnTurnTop.label = null;
					}else{
						btnTurnTop.setStyle("icon",null);
						btnTurnTop.label = _toTopLabel;
					}
				}
			}
			
			private var _toBottomLabel:String = "回到底部";
			public function set toBottomLabel(value:String):void
			{
				_toBottomLabel = value;
				checkBottomTag();
			}
			
			private var _toBottomIcon:Object;//底部图标
			public function set toBottomIcon(value:Object):void
			{
				_toBottomIcon = value;
				checkBottomTag();
			}
			
			private function checkBottomTag():void{
				if(btnTurnBottom != null){
					if(_toBottomIcon != null){
						btnTurnBottom.setStyle("icon",_toBottomIcon);
						btnTurnBottom.label = null;
					}else{
						btnTurnBottom.setStyle("icon",null);
						btnTurnBottom.label = _toBottomLabel;
					}
				}
			}
			
			private var _titleTag:UIComponent;//滚动到该标题位置停止的实例
			public function set titleTag(value:UIComponent):void
			{
				_titleTag = value;
			}
			
			private var _titleGroup:UIComponent;
			public function set titleGroup(value:UIComponent):void
			{
				if(_titleGroup != null && _titleGroup.parent == titleGroupContainer){
					titleGroupContainer.removeElement(_titleGroup);
				}
				_titleGroup = value;
				if(titleGroupContainer)titleGroupContainer.addElement(_titleGroup);
			}
			
			private function getMaxVerticalScrollDelta():Number{
				var delta:Number = this.layout.getVerticalScrollPositionDelta(NavigationUnit.END);
				return delta;
			}
			
			public function scrollToBottom():void{
				var delta:Number = getMaxVerticalScrollDelta();
				this.layout.verticalScrollPosition += delta;
			}
			public function scrollToTop():void{
				//				var delta:Number = this.layout.getVerticalScrollPositionDelta(NavigationUnit.);
				this.layout.verticalScrollPosition = 0;
			}
		]]>
	</fx:Script>
</s:List>
