<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="10" 
			 filters.disabled="{[enabledFilter]}"
			 >
	<!-- alpha.disabled="0.5" focusOut="sparkbuttonskin1_focusOutHandler(event)"-->
	<fx:Metadata>
		[HostComponent("com.best.web.gyorg.library.components.SingleColorButton")]
	</fx:Metadata>
     
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
			import flash.filters.ColorMatrixFilter;
			
            static private const exclusions:Array = ["labelDisplay"];
			static private const enabledFilter:ColorMatrixFilter = new ColorMatrixFilter([0.3086, 0.6094, 0.0820, 0, 0,
				0.3086, 0.6094,0.0820, 0, 0,
				0.3086, 0.6094,0.0820, 0, 0,
				0.3086, 0.6094, 0.0820, 0, 0,
				0, 0, 0, 1, 0]);
			
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");
                
                if (!isNaN(cr) && cornerRadius != cr)
                {
                    cornerRadius = cr;
//                    shadow.radiusX = cornerRadius;
                    fill.radiusX = cornerRadius;
					fillShade.radiusX = cornerRadius;
//                    lowlight.radiusX = cornerRadius;
//                    highlight.radiusX = cornerRadius;
//                    border.radiusX = cornerRadius;
                }
				
				checkFocusColor();
//				var bv:Boolean = getStyle("borderVisbile");
//				border.visible = bv;
//                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
//                if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
//                if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
			[Bindable]
			private var backgroundColor:uint;
            private var cornerRadius:Number = 2;
                  
			private var isFocusColor:Boolean;
			public override function setFocus():void
			{
				super.setFocus();
				isFocusColor = true;
				checkFocusColor();
			}
			
//			private function sparkbuttonskin1_focusOutHandler(e:FocusEvent):void
//			{
//				checkFocusColor();
//			}
//			
			private function checkFocusColor():void
			{
//				var f:InteractiveObject = getFocus();
//				if(f != null && this.contains(f)){
				if(isFocusColor){
					backgroundColor = getStyle("focusColor");
				}else{
					backgroundColor = getStyle("backgroundColor");
				}
			}
			
		]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
        <s:fill>
			<s:SolidColor color="{backgroundColor}" />
            <!--<s:LinearGradient rotation="90">
                <s:GradientEntry color="0xFFFFFF" 
                                 color.over="0xBBBDBD" 
                                 color.down="0xAAAAAA" 
                                 alpha="1" />
                <s:GradientEntry color="0xD8D8D8" 
                                 color.over="0x9FA0A1" 
                                 color.down="0x929496" 
                                 alpha="1" />
            </s:LinearGradient>-->
        </s:fill>
    </s:Rect>
	
	<!-- layer 3:fill-shade  -->
	<!--- @private -->
	<s:Rect id="fillShade" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:SolidColor  color.over="0xFFFFFF"
						   color.down="0x111111"
						   alpha.over=".35"
						   alpha.down=".35"
						   alpha="0" />
		</s:fill>
	</s:Rect>
	

	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<!--<s:Rect id="border" left="0" right="0" top="0" bottom="0" minWidth="1" minHeight="1" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" 
								 alpha="0.5625"
								 alpha.down="0.6375" />
				<s:GradientEntry color="0x000000" 
								 alpha="0.75" 
								 alpha.down="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>-->
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
			 left="4" right="4" top="2" bottom="0">
	</s:Label>
    
</s:SparkButtonSkin>
