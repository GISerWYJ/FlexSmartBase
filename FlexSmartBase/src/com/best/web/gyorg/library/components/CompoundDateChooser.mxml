<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:component="com.best.web.htyt.view.component.*" 
		 xmlns:gy="com.best.web.htyt.view.component.gy.*" 
		 xmlns:gyorg="com.best.web.gyorg.*" 
		 xmlns:components="com.best.web.gyorg.library.components.*"
		 initialize="init(event)" 
		 >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.best.web.gyorg.library.controller.DropDownControllerModify;
			
			import flash.filters.DropShadowFilter;
			
			import mx.collections.ArrayCollection;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.TextInput;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable]
			private var hourSelect:ArrayCollection;
			[Bindable]
			private var minuteSelect:ArrayCollection;
			
			private function init(e:FlexEvent):void
			{
				initDropDown();
				//				myStepper.textDisplay.maxChars = 2;//最多键入2个数据
				initSelect();
				showDate();
			}
			
			private var minuteDropDownController:DropDownControllerModify;
			private var hourDropDownController:DropDownControllerModify;
			private function initDropDown():void
			{
				hourDropDownController = new DropDownControllerModify();
				hourDropDownController.systemManager = this.systemManager;
				hourDropDownController.openComponent = txtHour;//当划入小时触发
				hourDropDownController.dropDown = listHourSelect;
				hourDropDownController.rollOverOpenDelay = 300;
				hourDropDownController.rollOutCloseDelay = 100;
				hourDropDownController.addEventListener(DropdownEvent.OPEN,onHourDropOpen);
				hourDropDownController.addEventListener(DropdownEvent.CLOSE,onHourDropClose);
				
				minuteDropDownController = new DropDownControllerModify();
				minuteDropDownController.systemManager = this.systemManager;
				minuteDropDownController.openComponent = txtMinute;//当划入分钟触发
				minuteDropDownController.dropDown = listMinuteSelect;
				minuteDropDownController.rollOverOpenDelay = 300;
				minuteDropDownController.rollOutCloseDelay = 100;
				minuteDropDownController.addEventListener(DropdownEvent.OPEN,onMinuteDropOpen);
				minuteDropDownController.addEventListener(DropdownEvent.CLOSE,onMinuteDropClose);
			}
			
			private function initSelect():void
			{
				var hourList:Array = [];
				hourSelect = new ArrayCollection(hourList);
				//24小时
				for (var i:int = 0; i < 24; i++) 
				{
					var hourLabel:String = i < 10 ? "0" + i : "" + i;
					hourList.push({value:i,label:hourLabel});
				}
				var minuteList:Array = [];
				minuteSelect = new ArrayCollection(minuteList);
				//每隔10分钟
				for (var j:int = 0; j < 6; j++) 
				{
					var minute:int = j * 10;
					var minuteLabel:String = minute < 10 ? "0" + minute : "" + minute;
					minuteList.push({value:minute,label:minuteLabel});
				}
			}
			
			[Bindable]
			private var _selectDate:Date;//选中的日期
			//获取当前时间
			public function get selectDate():Date
			{
				return _selectDate;
			}
			//重新刷新时间
			public function set selectDate(value:Date):void
			{
				_selectDate = value;
				showTime();
			}
			
			private function showDate():void
			{
				showTime();
				showDefaultFocus();
			}
			
			private function showDefaultFocus():void{
				showFocus(txtMinute);
				checkSpiner();
			}
			
			private function showTime():void
			{
				var hours:int = _selectDate != null ? _selectDate.hours : 0;
				var hourLabel:String = hours < 10 ? "0" + hours : "" + hours; 
				var minutes:int = _selectDate != null ? _selectDate.minutes : 0;
				var minuteLabel:String = minutes < 10 ? "0" + minutes : "" + minutes; 
				txtHour.text = hourLabel;// + minuteLabel;
				txtMinute.text = minuteLabel;
				
				dispatchChange();
			}
			
			private function spinnerChange(e:Event):void
			{
				if(focusLabel == txtMinute){
					_selectDate.minutes = mySpiner.value;//改变分钟的数据
				}else if(focusLabel == txtHour){
					_selectDate.hours = mySpiner.value;
					//					trace("选中txtHour");
				}
				showTime();
				showFocus(focusLabel);
				//				trace("spinner变化的值:" + mySpiner.value);
			}
			
			private function showFocus(target:RangeNumberInput):void{
				if(focusLabel == target)return;//一样的不变
				
				if(focusLabel != null){
					focusLabel.setStyle("borderVisible",false);//先恢复掉之前的
					//					focusLabel.borderVisible = false;
				}
				focusLabel = target;
				focusLabel.setStyle("borderVisible",true);
				focusLabel.setFocus();//强制设置焦点
				
				//				focusLabel.focusEnabled = false;
			}
			
			//			[Bindable]
			//			private var columnCount:int = 8;
			//打开界面
			private function onHourDropOpen(e:Event):void
			{
				listHourSelect.selectedIndex = -1;
				listHourSelect.visible = true;
				
				var gp:Point = txtHour.localToGlobal(new Point(txtHour.x,txtHour.y));
				var lp:Point = this.globalToLocal(gp);
				
				listHourSelect.y = lp.y - listHourSelect.height;
				
				//				focusLabel = txtHour;
				//				showFocus();
				//				checkSpiner();
			}
			
			private function onHourDropClose(e:Event):void
			{
				listHourSelect.visible = false;
			}
			
			private function onMinuteDropOpen(e:Event):void
			{
				listMinuteSelect.selectedIndex = -1;
				listMinuteSelect.visible = true;
				
				var gp:Point = txtMinute.localToGlobal(new Point(txtMinute.x,txtMinute.y));
				var lp:Point = this.globalToLocal(gp);
				
				listMinuteSelect.y = lp.y - listMinuteSelect.height;
				//				focusLabel = txtMinute;
				//				showFocus();
				//				checkSpiner();
			}
			
			private function onMinuteDropClose(e:Event):void
			{
				listMinuteSelect.visible = false;
			}
			
			private function onHourChange(event:IndexChangeEvent):void
			{
				if(listHourSelect.selectedItem != null){
					var hour:int = listHourSelect.selectedItem.value;
					_selectDate.hours = hour;
					showTime();//刷新时间
					showFocus(txtHour);//刷新焦点
					checkSpiner();//重新检查上下键范围
				}
			}
			
			private function onMinuteChange(event:IndexChangeEvent):void
			{
				if(listMinuteSelect.selectedItem != null){
					var minute:int = listMinuteSelect.selectedItem.value;
					_selectDate.minutes = minute;
					showTime();//刷新时间
					showFocus(txtMinute);//刷新焦点
					checkSpiner();//重新检查上下键范围
				}
			}
			
			private var focusLabel:RangeNumberInput;//选中的文本
			private function txtfocusInHandler(e:FocusEvent):void
			{
				showFocus(e.currentTarget as RangeNumberInput);
				checkSpiner();
			}
			
			private function checkSpiner():void{
				if(focusLabel == txtMinute){
					mySpiner.maximum = 59;
					mySpiner.value = _selectDate != null ? _selectDate.minutes : 0;//记录当前分钟的数据
				}else if(focusLabel == txtHour){
					mySpiner.maximum = 23;
					mySpiner.value = _selectDate != null ? _selectDate.hours : 0;//记录当前小时的数据
				}
			}
			
			private function txtfocusOutHandler(e:Event):void
			{
				var label:RangeNumberInput = e.currentTarget as RangeNumberInput;
				if(label != null && _selectDate != null){
					var value:int = int(label.text);
					if(label == txtMinute){
						//						if(value > 59){
						//							value = 59;
						//						}
						_selectDate.minutes = value;
					}else if(label == txtHour){
						//						if(value > 23){
						//							value = 23;
						//						}
						_selectDate.hours = value;
					}
					showTime();//刷新时间
					checkSpiner();//检查上下键
				}
			}
			
			//日期变化也要刷新时间
			private function onDateChange(e:CalendarLayoutChangeEvent):void
			{
				var newDate:Date = e.newDate;//变化后的新日期
				if(_selectDate == null){
					_selectDate = newDate;
					//					myDate.selectedDate = _selectDate;//重新刷新
				}else{
					_selectDate.fullYear = newDate.fullYear;
					//					_selectDate.month = newDate.month;
					_selectDate.setMonth(newDate.month,newDate.date);
					//					_selectDate.date = newDate.date;
				}
				dispatchChange();//刷新时间
			}
			
			private function dispatchChange():void
			{
				dispatchEvent(new Event("change"));//时间变化
			}
			
			private function txtChange(e:TextOperationEvent):void
			{
				var label:RangeNumberInput = e.currentTarget as RangeNumberInput;
				if(label != null && _selectDate != null){
					var value:int = label.value;
					if(label == txtMinute){
						//						if(value > 59){
						//							value = 59;
						//						}
						_selectDate.minutes = value;
					}else if(label == txtHour){
						//						if(value > 23){
						//							value = 23;
						//						}
						_selectDate.hours = value;
					}
					//					checkSpiner();//检查上下键
					dispatchChange();//刷新时间
				}
			}
			
			//回到当前页面
			private function onClickNow(e:MouseEvent):void
			{
				_selectDate = new Date();
				if(_showNowDayLast){//最后时刻23:59为止 默认显示
					_selectDate.hours = 23;
					_selectDate.minutes = 59;
				}else if(_showNowDayFirst){//恢复到当天的 00:00时刻
					_selectDate.hours = _selectDate.minutes = 0;
				}
				showDate();
				//				showFocus();
				//				checkSpiner();
			}
			
			private function onClickClear(e:MouseEvent):void
			{
				selectDate = null;//清除数据
				showDate();
			}
			
			private function removeList():void
			{
				if(listHourSelect.parent == this){
					this.removeElement(listHourSelect);
				}
				if(listMinuteSelect.parent == this){
					this.removeElement(listMinuteSelect);
				}
			}
			
			[Bindable]
			private var _showNowDayLast:Boolean;// = true;//是否显示到当前天的最后时刻23:59为止 默认显示
			public function get showNowDayLast():Boolean
			{
				return _showNowDayLast;
			}
			public function set showNowDayLast(value:Boolean):void
			{
				_showNowDayLast = value;
			}
			
			[Bindable]
			private var _showNowDayFirst:Boolean;// = true;
			public function get showNowDayFirst():Boolean
			{
				return _showNowDayFirst;
			}
			
			public function set showNowDayFirst(value:Boolean):void
			{
				_showNowDayFirst = value;
			}
			
			[Bindable]
			private var _showClear:Boolean;
			public function set showClear(value:Boolean):void
			{
				_showClear = value;
			}
			
			
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.myHeaderStyleName {
			color: #FFFFFF;
			fontSize: 14;
		}
		
		.myWeekDayStyleName{
			color: #757575;
			fontSize: 14;
			fontWeight: bold;
			backgroundColor: #ff0000;
		}
		
		.myTodayStyleName{
			color: #FFFFFF;
			fontSize: 14;
		}
		
		.myDateChooser{
			backgroundAlpha: 0.3;
		}
		
	</fx:Style>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<!--<s:BorderContainer width="100%" height="100%" borderColor="#A7A7A7">-->
	<s:VGroup horizontalAlign="center" verticalAlign="top" width="100%" height="100%" gap="0">
		<s:Group width="98%" horizontalCenter="0">
			<mx:DateChooser id="myDate" 
							change="onDateChange(event)"
							styleName="myDateChooser" width="100%"  y="11" 
							showToday = "false"
							selectedDate="{_selectDate}"
							selectionColor="#3B82E3"
							
							borderColor="#A7A7A7"
							borderVisible="false" color="#41619E" 
							contentBackgroundAlpha="0.0" contentBackgroundColor="#C94343"
							dayNames="{['日','一','二','三','四','五','六']}" 
							focusColor="#feddaa"
							fontSize="12" headerColors="{[0x547ecd,0x547ecd]}"
							headerStyleName="myHeaderStyleName" horizontalCenter="0"
							monthNames="{['1','2','3','4','5','6','7','8','9','10','11','12']}"
							rollOverColor="#feddaa" 
							todayColor="#3B82E3" todayStyleName="myTodayStyleName"
							weekDayStyleName="myWeekDayStyleName" yearSymbol="年"
							/>
			<!-- showToday="{_selectDate != null}" -->
			<s:Rect horizontalCenter="0" y="41" width="100%" height="29">
				<s:fill>
					<s:SolidColor color="0xececec" alpha=".3"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		<!--<s:BorderContainer width="96%" height="1" borderAlpha="0.5" borderWeight="1"
		color="#e5e5e5"/>-->
		<mx:HRule width="100%" strokeColor="#A7A7A7" />
		<s:Group x="4" width="100%">
			<s:Rect left="1" right="1" height="100%">
				<s:fill>
					<s:SolidColor color="0xf3f3f3"/>
				</s:fill>
			</s:Rect>
			<s:HGroup x="4" width="100%" gap="10" horizontalAlign="center"
					  verticalAlign="middle">
				<s:Label color="#819DD8" text="时间 : " fontWeight="bold" verticalAlign="middle"/>
				<s:Group x="64" y="5" width="90" height="30" enabled="{_selectDate != null}">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="0x5381d6"/>
						</s:fill>
					</s:Rect>
					<s:HGroup color="#FFFFFF" fontSize="15" id="inputArea"
							  width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="0">
						<components:RangeNumberInput id="txtHour" minimum="0" maximum="23"
													 width="30" 
													 borderColor="#FFC46B" borderVisible="false" contentBackgroundAlpha="0.0"
													 horizontalCenter="-9"
													 maxChars="2" 
													 text="5" textAlign="center"
													 verticalCenter="0"
													 focusIn="txtfocusInHandler(event)"
													 focusOut="txtfocusOutHandler(event)"
													 change="txtChange(event)"
													 />
						<!--<component:RangeNumberInput id="txtHour" maxChars="2"  />-->
						<s:Label fontSize="15" text=" : " />
						<components:RangeNumberInput id="txtMinute" minimum="0" maximum="59"
													 width="30" 
													 borderColor="#FFC46B" borderVisible="false" 
													 contentBackgroundAlpha="0.0" 
													 maxChars="2"
													 horizontalCenter="9" text="5" textAlign="center"
													 verticalCenter="0"
													 focusIn="txtfocusInHandler(event)"
													 focusOut="txtfocusOutHandler(event)"
													 change="txtChange(event)"
													 />
						<!--<s:NumericStepper id="myStepper" right="4" width="45" allowValueWrap="true"
						borderVisible="false" change="spinnerChange(event)"
						color="#FFFFFF" contentBackgroundAlpha="0.0" fontSize="15"
						verticalCenter="0"/>-->
						<s:Spinner id="mySpiner" allowValueWrap="true" change="spinnerChange(event)"/>
					</s:HGroup>
				</s:Group>
				<s:HGroup verticalAlign="middle" horizontalAlign="center" paddingRight="5">
					<s:Button x="145" width="50" label="当天" click="onClickNow(event)" />
					<components:ImageButton x="145" height="30" source="@Embed('/assets/cross.png')"
											click="onClickClear(event)" 
											includeInLayout="{_showClear}" visible="{_showClear}"
											/>
					<!--<components:ClearArea width="30" height="30" click="onClickClear(event)" 
										  includeInLayout="{_showClear}" visible="{_showClear}" />-->
				</s:HGroup>
			</s:HGroup>
		</s:Group>
	</s:VGroup>
	<!--</s:BorderContainer>-->
	<!-- headerColors标题颜色 必须传入数组过渡色 -->
	
	<s:List id="listHourSelect" y="157" borderColor="#4364A3" color="#FFFFFF" focusEnabled="false"
			horizontalCenter="0" fontWeight="normal"
			contentBackgroundColor="#5E92F2" filters="{[new DropShadowFilter(3,45,0,.5)]}"
			dataProvider="{hourSelect}"
			change="onHourChange(event)"
			visible="false"
			>
		<s:layout>
			<s:TileLayout horizontalAlign="center" verticalAlign="middle" horizontalGap="3"
						  requestedColumnCount="8"/>
		</s:layout>
	</s:List>
	<s:List id="listMinuteSelect" y="215" borderColor="#4364A3" focusEnabled="false"
			horizontalCenter="0" fontWeight="normal"
			color="#FFFFFF" contentBackgroundColor="#5E92F2" dataProvider="{minuteSelect}"
			filters="{[new DropShadowFilter(3,45,0,.5)]}"
			change="onMinuteChange(event)"
			visible="false"
			>
		<s:layout>
			<s:TileLayout horizontalAlign="center" verticalAlign="middle" requestedColumnCount="6"/>
		</s:layout>
	</s:List>
	
</s:Group>
